AWSTemplateFormatVersion: '2010-09-09'
Description: >
  image builder

Parameters:

  NamespaceName:
    Type: String

  ImageName:
    Type: String

  GitHubUser:
    Type: String
  GitHubRepo:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: True
  GitHubBranch:
    Type: String


Resources:

  Artifacts:
    Type: AWS::S3::Bucket

  ArtifactsPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: Artifacts
    Properties:
      Bucket: !Ref Artifacts
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - s3:GetBucketAcl
          - s3:GetBucketVersioning
          Resource:
          - !Sub ${ Artifacts.Arn }
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Resource:
          - !Sub ${ Artifacts.Arn }/*

  Pipeline: 
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: cloudops-docker-toolbox
      RoleArn: !Sub ${ PipelineServiceRole.Arn }
      ArtifactStore: 
        Type: S3
        Location: !Ref Artifacts
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: code
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Docker
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: code
              RunOrder: 1

  Repository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub ${ NamespaceName }/${ ImageName }
      RepositoryPolicyText: 
        Version: '2008-10-17'
        Statement:
        - Sid: AllowPush
          Effect: Allow
          Principal:
            AWS:
            - !Sub ${ CodeBuildServiceRole.Arn }
          Action:
          - ecr:PutImage
          - ecr:InitiateLayerUpload
          - ecr:UploadLayerPart
          - ecr:CompleteLayerUpload
          - ecr:GetDownloadUrlForLayer
          - ecr:BatchGetImage
          - ecr:BatchCheckLayerAvailability
        - Sid: AllowPull
          Effect: Allow
          Principal:
            AWS:
            - arn:aws:iam::813599875279:root
            Service:
            - codebuild.amazonaws.com
          Action:
          - ecr:GetDownloadUrlForLayer
          - ecr:BatchGetImage
          - ecr:BatchCheckLayerAvailability

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ AWS::StackName }-codebuild
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/docker:1.12.1
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: AWS_DEFAULT_REGION
          Value: !Sub ${ AWS::Region }
        - Name: AWS_ACCOUNT_ID
          Value: !Sub ${ AWS::AccountId }
        - Name: IMAGE_REPO_NAME
          Value: !Sub ${ Repository }
        - Name: IMAGE_TAG
          Value: latest
      ServiceRole: !Sub ${ CodeBuildServiceRole.Arn }

  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /cloudops/docker/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 
            - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 
              - codepipeline.amazonaws.com

  PipelineServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: dockerDockerBuilderPipeline
      Roles:
        - Ref: PipelineServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:

        # required
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: '*'

        # Artifacts
        - Effect: Allow
          Action: 
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Resource:
          - !Sub ${ Artifacts.Arn }/*

        # Logging
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:*:${ AWS::AccountId }:log-group:/aws/codebuild/*

        # Run CodeBuilds
        - Effect: Allow
          Action: 
          - codebuild:StartBuild
          - codebuild:BatchGetBuilds
          Resource:
          - !Sub ${ CodeBuildProject.Arn }

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /cloudops/docker/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
            - sts:AssumeRole
            Principal:
              Service:
              - codebuild.amazonaws.com

  CodeBuildServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: dockerDockerBuilder
      Roles:
      - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 

        # Artifacts
        - Effect: Allow
          Action: 
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Resource:
          - !Sub ${ Artifacts.Arn }/*

        # Logging
        - Effect: Allow
          Resource:
          - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProject}:*
          Action: 
          - logs:GetLogEvents
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        
        # Docker images
        - Effect: Allow
          Resource: '*' # permissions are set on the repo itself
          Action: 
          - ecr:BatchCheckLayerAvailability
          - ecr:CompleteLayerUpload
          - ecr:GetAuthorizationToken
          - ecr:InitiateLayerUpload
          - ecr:PutImage
          - ecr:UploadLayerPart

Outputs:
  RepositoryName:
    Value: !Ref Repository
    Export:
      Name: !Sub ${ NamespaceName }-${ ImageName }-ecr-name
  RepositoryUri:
    Value: !Sub ${ AWS::AccountId }.dkr.ecr.${ AWS::Region }.amazonaws.com/${ Repository }
    Export:
      Name: !Sub ${ NamespaceName }-${ ImageName }-ecr-uri
